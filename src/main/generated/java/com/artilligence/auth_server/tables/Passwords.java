/*
 * This file is generated by jOOQ.
*/
package com.artilligence.auth_server.tables;


import com.artilligence.auth_server.AuthJava;
import com.artilligence.auth_server.Indexes;
import com.artilligence.auth_server.Keys;
import com.artilligence.auth_server.tables.records.PasswordsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Passwords extends TableImpl<PasswordsRecord> {

    private static final long serialVersionUID = 65974547;

    /**
     * The reference instance of <code>auth_java.passwords</code>
     */
    public static final Passwords PASSWORDS = new Passwords();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PasswordsRecord> getRecordType() {
        return PasswordsRecord.class;
    }

    /**
     * The column <code>auth_java.passwords.id</code>.
     */
    public final TableField<PasswordsRecord, UInteger> ID = createField("id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>auth_java.passwords.user_id</code>.
     */
    public final TableField<PasswordsRecord, UInteger> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>auth_java.passwords.password</code>.
     */
    public final TableField<PasswordsRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>auth_java.passwords.created_at</code>.
     */
    public final TableField<PasswordsRecord, Timestamp> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>auth_java.passwords.code</code>. ??? ?????????????
     */
    public final TableField<PasswordsRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR(100), this, "??? ?????????????");

    /**
     * Create a <code>auth_java.passwords</code> table reference
     */
    public Passwords() {
        this(DSL.name("passwords"), null);
    }

    /**
     * Create an aliased <code>auth_java.passwords</code> table reference
     */
    public Passwords(String alias) {
        this(DSL.name(alias), PASSWORDS);
    }

    /**
     * Create an aliased <code>auth_java.passwords</code> table reference
     */
    public Passwords(Name alias) {
        this(alias, PASSWORDS);
    }

    private Passwords(Name alias, Table<PasswordsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Passwords(Name alias, Table<PasswordsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return AuthJava.AUTH_JAVA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PASSWORDS_PASSWORDS_CODE_INDEX, Indexes.PASSWORDS_PASSWORDS_PASSWORD_INDEX, Indexes.PASSWORDS_PASSWORDS_USER_ID_INDEX, Indexes.PASSWORDS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PasswordsRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_PASSWORDS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PasswordsRecord> getPrimaryKey() {
        return Keys.KEY_PASSWORDS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PasswordsRecord>> getKeys() {
        return Arrays.<UniqueKey<PasswordsRecord>>asList(Keys.KEY_PASSWORDS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Passwords as(String alias) {
        return new Passwords(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Passwords as(Name alias) {
        return new Passwords(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Passwords rename(String name) {
        return new Passwords(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Passwords rename(Name name) {
        return new Passwords(name, null);
    }
}
